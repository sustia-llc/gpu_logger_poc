services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka-data:/var/lib/kafka/data

  llm-service:
    build: .
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  test:
    build:
      context: .
      target: builder
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
    working_dir: /app
    environment:
      - KAFKA_BROKERS=kafka:29092
      - RUST_BACKTRACE=1
      - RUST_LOG=debug
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: >
      sh -c "
        echo 'Waiting for Kafka to be ready...' &&
        until nc -vz kafka 29092; do
          echo 'Waiting for Kafka...'
          sleep 2
        done &&
        echo 'Kafka is ready!' &&
        echo 'Running tests...' &&
        cargo test --verbose -- --ignored --test-threads=1 --nocapture
      "
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  cargo-cache:
  target-cache:
  kafka-data:
